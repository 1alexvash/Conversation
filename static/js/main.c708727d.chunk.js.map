{"version":3,"sources":["images/random.png","images/conversation.png","images/random2.png","components/Menu/Menu.js","components/Alphabetical/Alphabetical.js","components/Discussional/Discussional.js","components/WordGenerator/WordGenerator.js","components/QuestionGenerator/QuestionGenerator.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Menu","useState","showModel","setShowModel","className","onClick","to","FirstList","animate","setAnimate","ListComponent","data","map","letter","listIndex","key","word","itemIndex","RandomWordComponent","src","randomWordImg","randomLetter","Math","floor","random","length","randomWord","positionY","document","querySelectorAll","offsetTop","window","scroll","top","behavior","title","alt","conversationImg","target","href","Discussional","q","WordGenerator","setRandomWord","QuestionGenerator","App","path","component","Alphabetical","Boolean","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.c708727d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/random.7ffd03ad.png\";","module.exports = __webpack_public_path__ + \"static/media/conversation.e575b24f.png\";","module.exports = __webpack_public_path__ + \"static/media/random2.d530b969.png\";","import React, { useState } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nconst Menu = () => {\r\n  const [showModel, setShowModel] = useState(false);\r\n\r\n  function toggleModel() {\r\n    setShowModel(!showModel);\r\n  }\r\n\r\n  return (\r\n    <div className=\"Menu\">\r\n      <div\r\n        className={`hamburger ${showModel ? \"active\" : \"not-active\"}`}\r\n        onClick={toggleModel}\r\n      >\r\n        <div className=\"bar1\"></div>\r\n        <div className=\"bar2\"></div>\r\n        <div className=\"bar3\"></div>\r\n      </div>\r\n\r\n      <div className={`overlay ${showModel ? \"active\" : \"not-active\"}`}>\r\n        <div className=\"overlay-content\">\r\n          <Link onClick={() => setShowModel(false)} to={\"/alphabetical\"}>\r\n            Alphabetical list\r\n          </Link>\r\n          <Link onClick={() => setShowModel(false)} to={\"/discussional\"}>\r\n            Discussional list\r\n          </Link>\r\n          <Link onClick={() => setShowModel(false)} to={\"/word-generator\"}>\r\n            Word generator\r\n          </Link>\r\n          <Link onClick={() => setShowModel(false)} to={\"/question-generator\"}>\r\n            Question generator\r\n          </Link>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Menu;\r\n","import React, { useState } from \"react\";\r\nimport data from \"./data.json\";\r\n\r\nimport randomWordImg from \"../../images/random.png\";\r\nimport conversationImg from \"../../images/conversation.png\";\r\n\r\nconst FirstList = () => {\r\n  const [animate, setAnimate] = useState([null, null]);\r\n\r\n  const ListComponent = (\r\n    <div className=\"lists\">\r\n      {data.map((letter, listIndex) => (\r\n        <div\r\n          key={letter}\r\n          className={`list ${animate[0] === listIndex ? \"animate-list\" : \"\"}`}\r\n        >\r\n          {letter.map((word, itemIndex) => (\r\n            <p\r\n              className={`list-item ${\r\n                animate[0] === listIndex && animate[1] === itemIndex\r\n                  ? \"animate-item\"\r\n                  : \"\"\r\n              }`}\r\n              key={word}\r\n            >\r\n              {word}\r\n            </p>\r\n          ))}\r\n        </div>\r\n      ))}\r\n    </div>\r\n  );\r\n\r\n  const generateRandomWord = () => {\r\n    const randomLetter = Math.floor(Math.random() * data.length);\r\n    const randomWord =\r\n      Math.floor(Math.random() * (data[randomLetter].length - 1)) + 1;\r\n\r\n    // Scroll\r\n    const list = document.querySelectorAll(\".Alphabetical div\")[randomLetter];\r\n    const positionY = list.offsetTop;\r\n\r\n    window.scroll({\r\n      top: positionY,\r\n      behavior: \"smooth\",\r\n    });\r\n\r\n    // Animate\r\n    setAnimate([randomLetter, randomWord]);\r\n  };\r\n\r\n  const RandomWordComponent = (\r\n    <img\r\n      src={randomWordImg}\r\n      className=\"random-word\"\r\n      onClick={generateRandomWord}\r\n      title=\"Get a random word\"\r\n      alt=\"\"\r\n    />\r\n  );\r\n\r\n  return (\r\n    <div className=\"Alphabetical\">\r\n      <header className=\"header\">\r\n        Conversation\r\n        <img className=\"logo\" src={conversationImg} alt=\"conversation\" />\r\n      </header>\r\n      {ListComponent}\r\n      <footer className=\"footer\">\r\n        <p>\r\n          Author: <span className=\"small\">Alexander Vashchuk</span>\r\n        </p>\r\n        <p>\r\n          Original source:{\" \"}\r\n          <a\r\n            className=\"small\"\r\n            target=\"blank\"\r\n            href=\"https://esldiscussions.com/\"\r\n          >\r\n            https://esldiscussions.com/\r\n          </a>\r\n        </p>\r\n      </footer>\r\n      {RandomWordComponent}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default FirstList;\r\n","import React from \"react\";\r\nimport data from \"./data.json\";\r\n\r\nimport randomWordImg from \"../../images/random2.png\";\r\n\r\nconst Discussional = () => {\r\n  const generateRandomWord = () => {};\r\n\r\n  const RandomWordComponent = (\r\n    <img\r\n      src={randomWordImg}\r\n      className=\"random-word\"\r\n      onClick={generateRandomWord}\r\n      title=\"Get a random word\"\r\n      alt=\"\"\r\n    />\r\n  );\r\n\r\n  return (\r\n    <div className=\"Discussional\">\r\n      {data.map((q) => (\r\n        <p key={q}>{q}</p>\r\n      ))}\r\n      {RandomWordComponent}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Discussional;\r\n","import React, { useState } from \"react\";\r\n\r\nimport data from \"./data.json\";\r\n\r\nconst WordGenerator = () => {\r\n  const [randomWord, setRandomWord] = useState(\"XXX\");\r\n\r\n  const generateWord = () => {\r\n    const random = Math.floor(Math.random() * data.length);\r\n    const randomWord = data[random];\r\n    setRandomWord(randomWord);\r\n  };\r\n\r\n  return (\r\n    <div className=\"Word-Generator\">\r\n      random word: {randomWord}\r\n      <button onClick={generateWord}>Generate a word</button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default WordGenerator;\r\n","import React from \"react\";\r\n\r\nconst QuestionGenerator = () => {\r\n  return <div className=\"Question-Generator\"></div>;\r\n};\r\n\r\nexport default QuestionGenerator;\r\n","import React from \"react\";\nimport \"./scss/main.css\";\n\nimport { HashRouter as Router, Route } from \"react-router-dom\";\n\nimport Menu from \"./components/Menu/Menu\";\nimport Alphabetical from \"./components/Alphabetical/Alphabetical\";\nimport Discussional from \"./components/Discussional/Discussional\";\nimport WordGenerator from \"./components/WordGenerator/WordGenerator\";\nimport QuestionGenerator from \"./components/QuestionGenerator/QuestionGenerator\";\n\nconst App = () => {\n  return (\n    <Router>\n      <Menu />\n      <Route path=\"/alphabetical\" component={Alphabetical}></Route>\n      <Route path=\"/discussional\" component={Discussional}></Route>\n      <Route path=\"/word-generator\" component={WordGenerator}></Route>\n      <Route path=\"/question-generator\" component={QuestionGenerator}></Route>\n    </Router>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}